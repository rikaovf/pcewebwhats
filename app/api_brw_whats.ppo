#line 5 "app\api_brw_whats.prg"
function Api_Brw_whats( oDom )
    local hSession

    if USessionReady()
        hSession := UGetSession()
    endif

    do case
        case oDom:GetProc() == "setdatawhatsapi"
            SetDataWhatsApi( oDom )
        case oDom:GetProc() == "carregaorcamentos"

            carregaEnviaOrcs( oDom)
        case oDom:GetProc() == "encerrar_sessao"
            USessionEnd()
            URedirect("/")
        otherwise
            oDom:SetError( "Proc don't defined => " + oDom:GetProc())
    endcase

retu oDom:Send()









static function SetDataWhatsApi( oDom )

    local aRows := {}

    local aARQS := { { "ACE398.001",,, "ICE3982" }, { "ACE026.001",,, "ICE026" } }

    if ! abre_fecha_arquivos(aArqs, .T.)
        abre_fecha_arquivos(aArqs, .F.)
        return nil
    endif

    aRows := GetRows( "ACE398",, 150, oDom )

    oDom:TableSetData( "tablewhats", aRows )

    abre_fecha_arquivos(aArqs, .F.)

retu nil







function GetRows( cAlias, nRecno, nTotal, oDom )

    local hSession, aReg, j
    local aRows     := {}

    local n         := 0
    local aStr      := (cAlias)->( DbStruct() )
    local nFields    := len( aStr )
    local cSituacao := ""
    local hData        := {=>}
    local hPhone    := {=>}


    if (hData := USession("data_user")) == nil
        return aRows
    endif

    (cAlias)->( ordSetFocus("ICE3984") )

    (cAlias)->( SetScope(0, Padr(hData["numero"], 13)) )
    (cAlias)->( SetScope(1, Padr(hData["numero"], 13)) )

    (cAlias)->( DbGoTop() )

    if ace398->(DbVazio())
        return aRows
    endif


    hPhone["phone"] := hData["numero"]
    hPhone["port"] := hData["port"]

    oDom:SetJs("setPhone", hPhone)

    while n < nTotal .AND. (cAlias)->( ! eof() )

        aReg := {=>}

        HB_HSet( aReg, "id"     , n )
        HB_HSet( aReg, "_recno"     , (cAlias)->( Recno() ) )
        HB_HSet( aReg, "id_serial"     , Alltrim((cAlias)->ID_SERIAL))

        for j := 1 to nFields
            do case
                case (cAlias)->( FieldName( j ) ) == "SITUACAO"
                    if (cAlias)->( FieldGet( j ) ) == 1
                        cSituacao := "Novo Atendimento"
                    elseif (cAlias)->( FieldGet( j ) ) == 2
                        cSituacao := "Aguardando Cli."
                    elseif (cAlias)->( FieldGet( j ) ) == 3
                        cSituacao := "Aguardando Resp."
                    elseif (cAlias)->( FieldGet( j ) ) == 4
                        cSituacao := "Encerrado"
                    elseif (cAlias)->( FieldGet( j ) ) == 6
                        cSituacao := "Nova Conversa"
                    else
                        cSituacao := "Indefinido"
                    endif
                    HB_HSet( aReg, (cAlias)->( FieldName( j ) ), cSituacao )
                case (cAlias)->( FieldName( j ) ) == "ID_RETAG" .OR. (cAlias)->( FieldName( j ) ) == "HORA"
                    HB_HSet( aReg, (cAlias)->( FieldName( j ) ), (cAlias)->( FieldGet( j ) ) )
                case (cAlias)->( FieldName( j ) ) == "PHONE"
                    HB_HSet( aReg, (cAlias)->( FieldName( j ) ), formataTelefone( (cAlias)->( FieldGet( j ) ) ) )
                case (cAlias)->( FieldName( j ) ) == "N_WHATSAPP"
                    HB_HSet( aReg, (cAlias)->( FieldName( j ) ), formataTelefone( (cAlias)->( FieldGet( j ) ) ) )
                case (cAlias)->( FieldName( j ) ) == "CHAVE_CLI"
                    HB_HSet( aReg, (cAlias)->( FieldName( j ) ), retornaNomeCliente( , (cAlias)->( FieldGet( j ) ) ) )
                case (cAlias)->( FieldName( j ) ) == "DATA"
                    HB_HSet( aReg, (cAlias)->( FieldName( j ) ), STRTRAN(DTOC( STOD( (cAlias)->( FieldGet( j ) ) ) ), "-", "/" ) )
                case (cAlias)->( FieldName( j ) ) == "FUNC_ABERT"
                    HB_HSet( aReg, (cAlias)->( FieldName( j ) ), (cAlias)->( FieldGet( j ) ) + "-" + CodToDes( "F" + (cAlias)->( FieldGet( j ) ), "ace004.001", "ICE004", "TAB_DES" ) )
            endcase
        next

        Aadd( aRows, aReg )

        (cAlias)->( DbSkip() )

        n++
    end

retu aRows
















function dialogOrcamentos(oDom)
    local hSession
    local nWhatsapp := oDom:Get("nWhatsapp")
    local hData := {=>}


    if USessionReady()
        hSession := UGetSession()
    endif

    hData["ddd_orc"] := Padr(SubStr(nWhatsapp, 2, 2), 4)
    hData["n_orc"]   := Padl(StrTran(SubStr(nWhatsapp, 5, Len(nWhatsapp)), "-", ""), 10)

    Usession( "data_orc", hData )

    if USessionReady()
        hSession := UGetSession()
    endif


    oDom:SetDialog("Orçamentos", dialogOrc())

return nil




static function dialogOrc()
    LOCAL o, oDlg, oBrw, oCol
    LOCAL aOptions := {}

    oDlg := TWebDialog():New()

        o := TWebForm():New( oDlg, "dlgorc",,, "api_dialog_orc", )

        o:InitForm( )

            TWebButton():New( o, "atualiza_orcs", "", "setorcwhatsapi",,, 1,,,,,,,,,,,,,, )











o:Html( UInlinePrg( UReplaceBlocks( e"\t\t\t\t<script>\n\t\t\t\t\tvar atualizaOrcs = document.getElementById(\"dlgorc-atualiza_orcs\");\n\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tatualizaOrcs.click();\n\t\t\t\t\t\tatualizaOrcs.hidden = true;\n\t\t\t\t\t}, 100);\n\t\t\t\t</script>\n", "<$", "$>" ) ) )


            o:Row(, "top",,,,, )
                o:Col(, 11,, "s-0",, )


                    aOptions := { "index" => "id", "maxHeight" => "85vh" }

                    oBrw := TWebBrowse():New( o, "orcwhats", aOptions,,,,,,,, )
                        oCol := oBrw:AddCol( { "title" => "Numero", "field" => "NUM", "width" => 200, "headerSort" => .F. } )
                        oCol := oBrw:AddCol( { "title" => "Nome", "field" => "NOME", "width" => 200, "headerSort" => .F. } )
                        oCol := oBrw:AddCol( { "title" => "Valor", "field" => "VALOR", "headerSort" => .F. } )
                        oCol := oBrw:AddCol( { "title" => "Qtd.", "field" => "QTD", "headerSort" => .F. } )
                        oCol := oBrw:AddCol( { "title" => "Tipo", "field" => "TIPO", "headerSort" => .F. } )
                        oCol := oBrw:AddCol( { "title" => "Subtipo", "field" => "SUBTIPO", "headerSort" => .F. } )
                        oCol := oBrw:AddCol( { "title" => "Subtipo 2", "field" => "SSUBTIPO", "headerSort" => .F. } )
                    oBrw:Init( )
                o:End()
            o:End()
        o:End()

        return oDlg:Activate()

return nil











function carregaEnviaOrcs( oDom)

    local aReg, aData
    local n := 1
    local aRows := {}
    local cWhatsapp := oDom:Get("nWhatsapp")
    local cDDD := Padr(SubStr(cWhatsapp, 2, 2), 4)
    local cNum := Padl(StrTran(SubStr(cWhatsapp, 5, Len(cWhatsapp)), "-", ""), 10)


    local aARQS := { {"ACE055.001"  ,,, "ICE0556"}, {"ACE056.001"  ,,, "ICE0560"} }


    if ! abre_fecha_arquivos(aArqs, .T.)
        oDom:SetError("Erro ao abrir arquivos DBF de orçamentos!")
    else
        ACE055->( setScope( 0, cNum ) )
        ACE055->( setScope( 1, cNum ) )
        ACE055->( dbGoTop() )

        if ! ACE055->( DbVazio() )
            while ACE055->( ! eof() )
                aReg := {=>}

                HB_HSet( aReg, "id", n )
                HB_HSet( aReg, "_recno", ACE055->( Recno() ) )
                HB_HSet( aReg, "NUM", ACE055->rec_num )
                HB_HSet( aReg, "NOME", ACE055->rec_nom )
                HB_HSet( aReg, "DATA", FormataData(ACE055->rec_dat) )
                HB_HSet( aReg, "VALOR", ACE055->rec_pre )
                HB_HSet( aReg, "VALORTELA", "R$ " + Alltrim(Str(ACE055->rec_pre )))
                HB_HSet( aReg, "QTD", ACE055->rec_qsp )
                HB_HSet( aReg, "TIPO", ACE055->rec_tipo )
                HB_HSet( aReg, "SUBTIPO", ACE055->rec_sub_h )
                HB_HSet( aReg, "SSUBTIPO", ACE055->rec_tipo_h )

                Aadd( aRows, aReg )

                n++

                ACE055->( DbSkip() )
            enddo

            aData := {=>}

            HB_HSet( aData, "data", aRows )

            oDom:SetJs("inserirOrcs", aData)
        else
            oDom:SetMsg("Não existem orçamentos incluídos para este cliente!")
        endif
    endif

    abre_fecha_arquivos(aArqs, .F.)

return nil












function retornaFil()
    local cFil := ""
    local hSession, hData

    if USessionReady()
        hSession := UGetSession()
    endif

    if (hData := USession("data_user")) <> nil
        cFil := hData["fil"]
    endif

return cFil








function FormataData(dData)

local cData := DtoC(StoD(dData))

return SubStr(cData, 9, 2) + "/" + SubStr(cData, 6, 2) + "/" + SubStr(cData, 1, 4)
